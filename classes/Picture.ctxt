#BlueJ class context
comment0.target=Picture
comment0.text=\n\ A\ class\ that\ represents\ a\ picture.\ \ This\ class\ inherits\ from\n\ Simplepicture\ and\ allows\ the\ student\ to\ add\ functionality\ to\n\ the\ picture\ class.\n\n\ @author\ Barbara\ Ericson\ ericson@cc.gatech.edu\n
comment1.params=row\ col\ z\ x\ area\ ellipse
comment1.target=Drop(int,\ int,\ int,\ int,\ int,\ georegression.struct.curve.EllipseQuadratic_F32)
comment10.params=
comment10.target=double\ calculateVolume()
comment11.params=rmax\ rmin
comment11.target=double\ calculateVolume(double,\ double)
comment12.params=
comment12.target=double\ calculateArea()
comment13.params=rmax\ rmin
comment13.target=double\ calculateArea(double,\ double)
comment14.params=
comment14.target=Picture()
comment14.text=\n\ Constructor\ that\ takes\ no\ arguments\n
comment15.params=fileName
comment15.target=Picture(java.lang.String)
comment15.text=\n\ Constructor\ that\ takes\ a\ file\ name\ and\ creates\ the\ picture\n\ @param\ fileName\ the\ name\ of\ the\ file\ to\ create\ the\ picture\ from\n
comment16.params=height\ width
comment16.target=Picture(int,\ int)
comment16.text=\n\ Constructor\ that\ takes\ the\ width\ and\ height\n\ @param\ height\ the\ height\ of\ the\ desired\ picture\n\ @param\ width\ the\ width\ of\ the\ desired\ picture\n
comment17.params=copyPicture
comment17.target=Picture(Picture)
comment17.text=\n\ Constructor\ that\ takes\ a\ picture\ and\ creates\ a\n\ copy\ of\ that\ picture\n\ @param\ copypicture\ the\ picture\ to\ copy\n
comment18.params=image
comment18.target=Picture(java.awt.image.BufferedImage)
comment18.text=\n\ Constructor\ that\ takes\ a\ buffered\ image\n\ @param\ image\ the\ buffered\ image\ to\ use\n
comment19.params=
comment19.target=java.lang.String\ toString()
comment19.text=\n\ Method\ to\ return\ a\ string\ with\ information\ about\ this\ picture.\n\ @return\ a\ string\ with\ information\ about\ the\ picture\ such\ as\ fileName,\n\ height\ and\ width.\n
comment2.params=
comment2.target=DropInfo\ getDropInfo()
comment20.params=csvMatrix\ filename
comment20.target=void\ writeCsv(java.lang.String[][],\ java.lang.String)
comment21.params=
comment21.target=void\ zeroBlue()
comment21.text=Method\ to\ set\ the\ blue\ to\ 0
comment22.params=
comment22.target=void\ mirrorVertical()
comment22.text=\ Method\ that\ mirrors\ the\ picture\ around\ a\n\ vertical\ mirror\ in\ the\ center\ of\ the\ picture\nfrom\ left\ to\ right
comment23.params=
comment23.target=void\ mirrorVerticalRightToLeft()
comment24.params=
comment24.target=void\ mirrorHorizontal()
comment25.params=
comment25.target=void\ mirrorHorizontalBotToTop()
comment26.params=
comment26.target=void\ mirrorTemple()
comment26.text=Mirror\ just\ part\ of\ a\ picture\ of\ a\ temple
comment27.params=fromPic\ startRow\ startCol
comment27.target=void\ copy(Picture,\ int,\ int)
comment27.text=\ copy\ from\ the\ passed\ fromPic\ to\ the\n\ specified\ startRow\ and\ startCol\ in\ the\n\ current\ picture\n\ @param\ fromPic\ the\ picture\ to\ copy\ from\n\ @param\ startRow\ the\ start\ row\ to\ copy\ to\n\ @param\ startCol\ the\ start\ col\ to\ copy\ to\n
comment28.params=fromPic\ startRow\ startCol\ startFromRow\ endFromRow\ startFromCol\ endFromCol
comment28.target=void\ copy(Picture,\ int,\ int,\ int,\ int,\ int,\ int)
comment29.params=
comment29.target=void\ createCollage()
comment29.text=Method\ to\ create\ a\ collage\ of\ several\ pictures
comment3.params=
comment3.target=double\ calculateQ()
comment30.params=
comment30.target=void\ myCollage()
comment31.params=edgeDist
comment31.target=void\ edgeDetection(int)
comment31.text=\ Method\ to\ show\ large\ changes\ in\ color\n\ @param\ edgeDist\ the\ distance\ for\ finding\ edges\n
comment32.params=size
comment32.target=void\ pixelate(int)
comment33.params=size
comment33.target=void\ blur(int)
comment34.params=
comment34.target=void\ keepOnlyBlue()
comment35.params=
comment35.target=void\ negate()
comment36.params=
comment36.target=void\ grayscale()
comment37.params=
comment37.target=void\ fixUnderwater()
comment38.params=
comment38.target=void\ crossOutPicture()
comment39.params=p
comment39.target=void\ subtract(Picture)
comment4.params=
comment4.target=double\ calculateS()
comment40.params=r
comment40.target=int\ sumRow(int)
comment41.params=r\ minCol\ maxCol
comment41.target=int\ sumRow(int,\ int,\ int)
comment42.params=c
comment42.target=int\ sumCol(int)
comment43.params=c\ minRow\ maxRow
comment43.target=int\ sumCol(int,\ int,\ int)
comment44.params=c\ minRow\ maxRow
comment44.target=int\ sumColor(int,\ int,\ int)
comment45.params=
comment45.target=boolean\ isChange()
comment46.params=threshold\ minSize
comment46.target=Drop\ drawRectAroundDrop(int,\ int)
comment47.params=minRow\ maxRow\ minCol\ maxCol
comment47.target=void\ cleanDrop(int,\ int,\ int,\ int)
comment48.params=minRow\ maxRow\ minCol\ maxCol\ z\ x
comment48.target=georegression.struct.curve.EllipseQuadratic_F32\ toOffsetEllipse(int,\ int,\ int,\ int,\ int,\ int)
comment49.params=startRow\ startCol\ threshold\ minSize
comment49.target=Drop\ drawRectAroundDrop(int,\ int,\ int,\ int)
comment5.params=
comment5.target=double\ calculateRmax()
comment50.params=minRow\ maxRow\ minCol\ maxCol\ threshold\ minSize
comment50.target=Drop\ cleanRectangle(int,\ int,\ int,\ int,\ int,\ int)
comment51.params=p
comment51.target=double[]\ fitParabola(int[])
comment52.params=points
comment52.target=double[]\ fitSinusoid(double[])
comment53.params=rmax\ rmin\ angle
comment53.target=double[][]\ fixAxisSwitching(double[],\ double[],\ double[])
comment54.params=args
comment54.target=void\ main(java.lang.String[])
comment54.text=\ Main\ method\ for\ testing\ -\ each\ class\ in\ Java\ can\ have\ a\ main\n\ method\n
comment6.params=
comment6.target=double\ calculateRmin()
comment7.params=
comment7.target=double\ calculateZ()
comment8.params=
comment8.target=double\ calculateX()
comment9.params=
comment9.target=double\ calculateAngle()
numComments=55
